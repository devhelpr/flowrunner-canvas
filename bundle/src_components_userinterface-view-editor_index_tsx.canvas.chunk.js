/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["src_components_userinterface-view-editor_index_tsx"],{

/***/ "./src/components/userinterface-view-editor/components/layout-with-droparea.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LayoutWithDropArea\": () => (/* binding */ LayoutWithDropArea)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var _userinterface_view_components_layout_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/components/userinterface-view/components/layout-renderer.tsx\");\n\r\n\r\nclass LayoutWithDropArea extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dropZone = undefined;\r\n        this.onAllowDrop = (event) => {\r\n            event.preventDefault();\r\n            if (this.dropZone && this.dropZone.current) {\r\n                (this.dropZone.current).classList.add(\"hovering\");\r\n            }\r\n        };\r\n        this.onDragLeave = (event) => {\r\n            if (this.dropZone && this.dropZone.current) {\r\n                (this.dropZone.current).classList.remove(\"hovering\");\r\n            }\r\n        };\r\n        this.onDropTask = (event) => {\r\n            event.preventDefault();\r\n            if (this.dropZone && this.dropZone.current) {\r\n                (this.dropZone.current).classList.remove(\"hovering\");\r\n            }\r\n            try {\r\n                let draggable = JSON.parse(event.dataTransfer.getData(\"data-draggable\"));\r\n                if (!!draggable.isElement) {\r\n                    return;\r\n                }\r\n                if (!!draggable.isElement && draggable.layout === this.props.name) {\r\n                    return false;\r\n                }\r\n                console.log(\"draggable\", draggable);\r\n                this.setState(state => {\r\n                    let layout = [...state.layout];\r\n                    layout.push({\r\n                        title: draggable.title,\r\n                        subtitle: draggable.subtitle || \"\",\r\n                        name: this.props.name + \"-\" + this.props.level + \"-\" + (layout.length + 1) + draggable.title.replace(/\\s/g, '')\r\n                    });\r\n                    return {\r\n                        layout: layout\r\n                    };\r\n                }, () => {\r\n                    this.props.onStoreLayout(this.props.level, this.props.layoutIndex, this.props.layoutIndexLevel || 0, this.state.layout);\r\n                });\r\n            }\r\n            catch (err) {\r\n            }\r\n            return true;\r\n        };\r\n        this.onDragStartOther = (event) => {\r\n            console.log(\"onDragStartOther\", event.target.getAttribute(\"data-layout-parent\"));\r\n            event.dataTransfer.setData(\"data-draggable\", JSON.stringify({\r\n                layout: event.target.getAttribute(\"data-layout-parent\"),\r\n                isElement: true,\r\n                id: event.target.id\r\n            }));\r\n        };\r\n        this.onAllowDropOther = (event) => {\r\n            event.preventDefault();\r\n            const id = event.target.id;\r\n            const domElement = document.getElementById(id);\r\n            if (domElement) {\r\n                domElement.classList.add(\"hovering\");\r\n            }\r\n        };\r\n        this.onDropTaskOther = (event) => {\r\n            event.preventDefault();\r\n            const id = event.target.id;\r\n            const domElement = document.getElementById(id);\r\n            if (domElement) {\r\n                domElement.classList.remove(\"hovering\");\r\n                try {\r\n                    let draggable = JSON.parse(event.dataTransfer.getData(\"data-draggable\"));\r\n                    if (!!draggable.isElement && draggable.layout === this.props.name && draggable.id !== id) {\r\n                        return false;\r\n                    }\r\n                }\r\n                catch (err) {\r\n                }\r\n            }\r\n        };\r\n        this.onDragLeaveOther = (event) => {\r\n            const id = event.target.id;\r\n            const domElement = document.getElementById(id);\r\n            if (domElement) {\r\n                domElement.classList.remove(\"hovering\");\r\n            }\r\n        };\r\n        this.dropZone = react__WEBPACK_IMPORTED_MODULE_0__.createRef();\r\n        let layout = [];\r\n        let initialLayout = props.onGetLayout(props.level, props.layoutIndex, props.layoutIndexLevel || 0);\r\n        if (initialLayout !== false) {\r\n            layout = initialLayout;\r\n        }\r\n        this.state = {\r\n            layout: layout,\r\n        };\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.tree !== undefined && this.props.tree !== null &&\r\n            prevProps.tree !== this.props.tree) {\r\n            let layout = [];\r\n            let initialLayout = this.props.onGetLayout(this.props.level, this.props.layoutIndex, this.props.layoutIndexLevel || 0);\r\n            if (initialLayout !== false) {\r\n                layout = initialLayout;\r\n            }\r\n            this.setState({\r\n                layout: layout,\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        const { level, name } = this.props;\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n            this.state.layout.map((layout, index) => {\r\n                if (layout.title == \"element\") {\r\n                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index },\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { draggable: true, \"data-layout-parent\": this.props.name, id: this.props.name + \"-element\" + index, onDragOver: this.onAllowDropOther, onDragStart: this.onDragStartOther, onDrop: this.onDropTaskOther, onDragLeave: this.onDragLeaveOther, className: \"draggable-element font-weight-bold\" }, layout.title));\r\n                }\r\n                if (layout.title == \"flowNode\") {\r\n                    const flowNode = this.props.flowHash[layout.subtitle];\r\n                    if (flowNode === undefined) {\r\n                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index });\r\n                    }\r\n                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index },\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { draggable: true, onDragOver: this.onAllowDropOther, onDragStart: this.onDragStartOther, onDrop: this.onDropTaskOther, onDragLeave: this.onDragLeaveOther, \"data-layout-parent\": this.props.name, className: \"draggable-element ui-view-layout__container\", id: this.props.name + \"-flownode\" + index },\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"font-weight-bold\" }, layout.title),\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-secondary\" }, layout.subtitle),\r\n                            (0,_userinterface_view_components_layout_renderer__WEBPACK_IMPORTED_MODULE_1__.renderFlowNode)(flowNode, {\r\n                                context: {\r\n                                    getNodeInstance: this.props.getNodeInstance,\r\n                                    flowrunnerConnector: this.props.flowrunnerConnector,\r\n                                    flow: this.props.flow,\r\n                                    renderHtmlNode: this.props.renderHtmlNode\r\n                                }\r\n                            }, true)));\r\n                }\r\n                if (layout.title == \"layout2columns\") {\r\n                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index },\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"layout-container layout-container__layout2columns\" },\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"font-weight-bold\" }, layout.title),\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"row\" },\r\n                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-6 layout-container__layout2columns-col-1\" },\r\n                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutWithDropArea, { onGetLayout: this.props.onGetLayout, onStoreLayout: this.props.onStoreLayout, layoutIndex: index, name: layout.name + \"c0-\" + index + \"c\", level: level + 1, getNodeInstance: this.props.getNodeInstance, flowrunnerConnector: this.props.flowrunnerConnector, flow: this.props.flow, renderHtmlNode: this.props.renderHtmlNode, flowHash: this.props.flowHash })),\r\n                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-6 layout-container__layout2columns-col-2\" },\r\n                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutWithDropArea, { onGetLayout: this.props.onGetLayout, onStoreLayout: this.props.onStoreLayout, layoutIndex: index, layoutIndexLevel: 1, name: layout.name + \"c1-\" + index + \"c\", level: level + 1, getNodeInstance: this.props.getNodeInstance, flowrunnerConnector: this.props.flowrunnerConnector, flow: this.props.flow, renderHtmlNode: this.props.renderHtmlNode, flowHash: this.props.flowHash })))));\r\n                }\r\n                return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index },\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"layout-container\" },\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"font-weight-bold\" }, layout.title),\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutWithDropArea, { onGetLayout: this.props.onGetLayout, onStoreLayout: this.props.onStoreLayout, layoutIndex: index, name: layout.name + \"l\" + index + \"l\", level: level + 1, getNodeInstance: this.props.getNodeInstance, flowrunnerConnector: this.props.flowrunnerConnector, flow: this.props.flow, renderHtmlNode: this.props.renderHtmlNode, flowHash: this.props.flowHash }))));\r\n            }),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { ref: this.dropZone, className: \"layout__droparea\", onDragOver: this.onAllowDrop, onDrop: this.onDropTask, onDragLeave: this.onDragLeave }));\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/userinterface-view-editor/components/layout-with-droparea.tsx?");

/***/ }),

/***/ "./src/components/userinterface-view-editor/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UserInterfaceViewEditor\": () => (/* binding */ UserInterfaceViewEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var _components_layout_with_droparea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/components/userinterface-view-editor/components/layout-with-droparea.tsx\");\n/* harmony import */ var _helpers_flow_to_canvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/helpers/flow-to-canvas.ts\");\n/* harmony import */ var _helpers_shape_settings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/helpers/shape-settings.ts\");\n/* harmony import */ var _userinterface_view_components_layout_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./src/components/userinterface-view/components/layout-renderer.tsx\");\n/* harmony import */ var _flow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./src/components/flow/index.tsx\");\n/* harmony import */ var _state_flow_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./src/state/flow-state.ts\");\n/* harmony import */ var _state_layout_state__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./src/state/layout-state.ts\");\n/* harmony import */ var _state_canvas_mode_state__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./src/state/canvas-mode-state.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst UserInterfaceViewEditor = (props) => {\r\n    const [tree, setTree] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\r\n    const [renderIndex, setRenderIndex] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\r\n    const [flowHash, setFlowHash] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\r\n    const [nodesOnLayout, setNodesOnLayout] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\r\n    const flow = (0,_state_flow_state__WEBPACK_IMPORTED_MODULE_6__.useFlowStore)();\r\n    const canvasMode = (0,_state_canvas_mode_state__WEBPACK_IMPORTED_MODULE_8__.useCanvasModeStateStore)();\r\n    const layout = (0,_state_layout_state__WEBPACK_IMPORTED_MODULE_7__.useLayoutStore)();\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        let newFlowHash = {};\r\n        flow.flow.map((node) => {\r\n            newFlowHash[node.name] = node;\r\n            return true;\r\n        });\r\n        let initTree = JSON.parse(layout.layout) || {};\r\n        setTree(initTree);\r\n        setFlowHash(newFlowHash);\r\n        setNodesOnLayout(getFlowNodeFromTree(initTree, 1, 0, 0));\r\n    }, []);\r\n    const getFlowNodeFromTree = (layoutTree, level, index, subIndex) => {\r\n        let treeHashKey = level + \".\" + index + \".\" + subIndex;\r\n        if (layoutTree[treeHashKey]) {\r\n            let tree = layoutTree[treeHashKey];\r\n            let flowNodes = {};\r\n            tree.map((layoutBlock, treeIndex) => {\r\n                if (layoutBlock.title == \"flowNode\") {\r\n                    flowNodes[layoutBlock.subtitle] = true;\r\n                }\r\n                else if (layoutBlock.title == \"layout2columns\") {\r\n                    flowNodes = { ...flowNodes, ...getFlowNodeFromTree(layoutTree, level + 1, treeIndex, 0) };\r\n                    flowNodes = { ...flowNodes, ...getFlowNodeFromTree(layoutTree, level + 1, treeIndex, 1) };\r\n                }\r\n                else {\r\n                    flowNodes = { ...flowNodes, ...getFlowNodeFromTree(layoutTree, level + 1, treeIndex, 0) };\r\n                }\r\n            });\r\n            return flowNodes;\r\n        }\r\n        return {};\r\n    };\r\n    const onStoreLayout = (level, index, subIndex, layout) => {\r\n        let updatedTree = { ...tree };\r\n        let treeHashKey = level + \".\" + index + \".\" + subIndex;\r\n        updatedTree[treeHashKey] = layout;\r\n        setRenderIndex(renderIndex + 1);\r\n        setTree(updatedTree);\r\n        setNodesOnLayout(getFlowNodeFromTree(updatedTree, 1, 0, 0));\r\n    };\r\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\r\n        layout.storeLayout(JSON.stringify(tree));\r\n    }, [tree]);\r\n    const onGetLayout = (level, index, subIndex) => {\r\n        let treeHashKey = level + \".\" + index + \".\" + subIndex;\r\n        if (tree[treeHashKey]) {\r\n            return tree[treeHashKey];\r\n        }\r\n        return false;\r\n    };\r\n    const onDragStart = (event) => {\r\n        event.dataTransfer.setData(\"data-draggable\", JSON.stringify({\r\n            title: event.target.getAttribute(\"data-draggable\"),\r\n            subtitle: event.target.getAttribute(\"data-id\") || \"\"\r\n        }));\r\n    };\r\n    const clearLayout = (event) => {\r\n        event.preventDefault();\r\n        setTree({});\r\n        setRenderIndex(renderIndex + 1);\r\n        setNodesOnLayout({});\r\n        return false;\r\n    };\r\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"container-fluid\" },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, \"UIVIEW EDITOR\"),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"row ui-editor__row\" },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-10 layout__dropzone\" },\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"layout__dropzone-inner\", \"data-renderindex\": renderIndex },\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_layout_with_droparea__WEBPACK_IMPORTED_MODULE_1__.LayoutWithDropArea, { onGetLayout: onGetLayout, onStoreLayout: onStoreLayout, layoutIndex: 0, name: \"l\", level: 1, tree: tree, getNodeInstance: props.getNodeInstance, flowrunnerConnector: props.flowrunnerConnector, flow: flow.flow, renderHtmlNode: props.renderHtmlNode, flowHash: flowHash }))),\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-2 layout__draggables\" },\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { type: \"button\", onClick: clearLayout, className: \"btn btn-danger\" }, \"Clear layout\")),\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { onDragStart: onDragStart, \"data-draggable\": \"layout\", draggable: true, className: \"layout__draggable\" }, \"Layout\"),\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { onDragStart: onDragStart, \"data-draggable\": \"layout2columns\", draggable: true, className: \"layout__draggable\" }, \"Layout 2columns\"),\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { onDragStart: onDragStart, \"data-draggable\": \"element\", draggable: true, className: \"layout__draggable\" }, \"Element\"),\r\n                    flow.flow.filter((node, index) => {\r\n                        if (!!node.hideFromUI || nodesOnLayout[node.name]) {\r\n                            return false;\r\n                        }\r\n                        let shapeType = _helpers_flow_to_canvas__WEBPACK_IMPORTED_MODULE_2__.FlowToCanvas.getShapeType(node.shapeType, node.taskType, node.isStartEnd);\r\n                        const settings = _helpers_shape_settings__WEBPACK_IMPORTED_MODULE_3__.ShapeSettings.getShapeSettings(node.taskType, node);\r\n                        if (shapeType === \"Html\" && !!settings.hasUI) {\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }).map((flowNode, index) => {\r\n                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { key: \"flowNode-\" + index, onDragStart: onDragStart, \"data-draggable\": \"flowNode\", \"data-id\": flowNode.name, draggable: true, className: \"layout__draggable\" },\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, flowNode.name),\r\n                            (0,_userinterface_view_components_layout_renderer__WEBPACK_IMPORTED_MODULE_4__.renderFlowNode)(flowNode, {\r\n                                context: {\r\n                                    getNodeInstance: props.getNodeInstance,\r\n                                    flowrunnerConnector: props.flowrunnerConnector,\r\n                                    flow: flow.flow,\r\n                                    renderHtmlNode: props.renderHtmlNode\r\n                                }\r\n                            }, false));\r\n                    })))),\r\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_flow__WEBPACK_IMPORTED_MODULE_5__.Flow, { flow: flow.flow, flowrunnerConnector: props.flowrunnerConnector, flowId: flow.flowId }));\r\n};\r\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/userinterface-view-editor/index.tsx?");

/***/ })

}]);