/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["src_components_html-plugins_grid-edit_tsx"],{

/***/ "./src/components/html-plugins/grid-edit.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridEditNodeHtmlPlugin\": () => (/* binding */ GridEditNodeHtmlPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react-konva/es/ReactKonva.js\");\n/* harmony import */ var _components_preset_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/html-plugins/components/preset-manager.tsx\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/uuid/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_3__);\n\r\n\r\n\r\n\r\nconst uuidV4 = uuid__WEBPACK_IMPORTED_MODULE_3__.v4;\r\nclass GridEditNodeHtmlPlugin extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            value: this.props.node.defaultValue || 0,\r\n            receivedPayload: [],\r\n            data: []\r\n        };\r\n        this.observableId = uuidV4();\r\n        this.unmounted = false;\r\n        this.clickCircle = (matrixValue, event) => {\r\n            event.evt.preventDefault();\r\n            if (matrixValue) {\r\n                let list = [...this.state.data];\r\n                let item = list[matrixValue.x + matrixValue.y * ((this.props.node && this.props.node.columns) || 8)];\r\n                item.value = (item.value == 1 ? 0 : 1);\r\n                this.setState({ data: list });\r\n                let values = [];\r\n                list.map((value, index) => {\r\n                    if (value.value == 1) {\r\n                        values.push({ ...value });\r\n                    }\r\n                });\r\n                this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, values, this.props.node.name);\r\n            }\r\n            return false;\r\n        };\r\n        this.onLoadPreset = () => {\r\n        };\r\n        this.onGetData = () => {\r\n            let values = [];\r\n            this.state.data.map((value, index) => {\r\n                if (value.value == 1) {\r\n                    values.push({ ...value });\r\n                }\r\n            });\r\n            return values;\r\n        };\r\n        this.onSetData = (data) => {\r\n            let values = [];\r\n            let list = new Array((this.props.node.columns || 8) * (this.props.node.rows || 8)).fill(0).map((item, index) => {\r\n                return {\r\n                    value: 0,\r\n                    x: index % (this.props.node.columns || 8),\r\n                    y: Math.floor(index / (this.props.node.columns || 8))\r\n                };\r\n            });\r\n            data.map((value, index) => {\r\n                if (value.value == 1) {\r\n                    list[value.y * (this.props.node.columns || 8) + value.x].value = 1;\r\n                    values.push({ ...value });\r\n                }\r\n            });\r\n            this.setState({ data: list });\r\n            this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, values, this.props.node.name);\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        console.log(\"componentDidMount slider\");\r\n        if (this.props.node) {\r\n            this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, this.props.node.defaultValue || 0, \"\");\r\n            this.setState({ data: new Array((this.props.node.columns || 8) *\r\n                    (this.props.node.rows || 8)).fill(0).map((item, index) => {\r\n                    return {\r\n                        value: 0,\r\n                        x: index % (this.props.node.columns || 8),\r\n                        y: Math.floor(index / (this.props.node.columns || 8))\r\n                    };\r\n                })\r\n            });\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.flow != this.props.flow) {\r\n            if (this.props.node) {\r\n                this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, this.state.value, this.props.node.onChange || this.props.node.name);\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.unmounted = true;\r\n    }\r\n    getWidth() {\r\n        return (((this.props.node && this.props.node.columns) || 8) * 16) + 20;\r\n    }\r\n    getHeight() {\r\n        return (((this.props.node && this.props.node.rows) || 8) * 16) + (3 * 16) + 4 + 150;\r\n    }\r\n    getCanvasHeight() {\r\n        return (((this.props.node && this.props.node.rows) || 8) * 16) + (1 * 16) + 4;\r\n    }\r\n    render() {\r\n        let circles = null;\r\n        let { node } = this.props;\r\n        if (!this.state.data) {\r\n            return null;\r\n        }\r\n        let list = this.state.data;\r\n        circles = list.map((matrixValue, index) => {\r\n            let circle = null;\r\n            let x = matrixValue.x;\r\n            let y = matrixValue.y;\r\n            if (matrixValue.value == 1) {\r\n                circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"xycanvas-gridedit-alive-\" + index },\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-alive-circle-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 14, stroke: \"#000000\", strokeWidth: 2, width: 14, height: 14, opacity: 1, fill: \"#ffffff\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false }),\r\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-alive-inner-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 16, stroke: \"#ffffff\", strokeWidth: 2, width: 12, height: 12, opacity: 1, fill: \"#000000\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false }));\r\n            }\r\n            else {\r\n                circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-dead-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 14, stroke: \"#000000\", strokeWidth: 1, width: 14, height: 14, opacity: 1, fill: \"#ffffff\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false });\r\n            }\r\n            return circle;\r\n        });\r\n        list = null;\r\n        node = null;\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"html-plugin-node html-plugin-node__grid-edit\", style: {\r\n                backgroundColor: \"white\",\r\n                width: (this.getWidth() || this.props.node.width || 250) + \"px\",\r\n                height: (this.getHeight() || this.props.node.height || 250) + \"px\"\r\n            } },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Stage, { className: \"stage-div\", pixelRatio: 1, width: this.getWidth() || this.props.node.width || 250, height: (this.getCanvasHeight()) || this.props.node.height || 250 },\r\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Layer, null, circles)),\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_preset_manager__WEBPACK_IMPORTED_MODULE_2__.PresetManager, { node: this.props.node, onLoadPreset: this.onLoadPreset, onGetData: this.onGetData, onSetData: this.onSetData }));\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/html-plugins/grid-edit.tsx?");

/***/ })

}]);