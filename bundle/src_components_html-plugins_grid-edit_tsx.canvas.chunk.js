/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["src_components_html-plugins_grid-edit_tsx"],{

/***/ "./src/components/html-plugins/grid-edit.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridEditNodeHtmlPlugin\": () => (/* binding */ GridEditNodeHtmlPlugin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react-konva/es/ReactKonva.js\");\n/* harmony import */ var _components_preset_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/html-plugins/components/preset-manager.tsx\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/uuid/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst uuidV4 = uuid__WEBPACK_IMPORTED_MODULE_3__.v4;\nclass GridEditNodeHtmlPlugin extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            value: this.props.node.defaultValue || 0,\n            receivedPayload: [],\n            data: []\n        };\n        this.observableId = uuidV4();\n        this.unmounted = false;\n        this.clickCircle = (matrixValue, event) => {\n            event.evt.preventDefault();\n            if (matrixValue) {\n                let list = [...this.state.data];\n                let item = list[matrixValue.x + matrixValue.y * ((this.props.node && this.props.node.columns) || 8)];\n                item.value = (item.value == 1 ? 0 : 1);\n                this.setState({ data: list });\n                let values = [];\n                list.map((value, index) => {\n                    if (value.value == 1) {\n                        values.push({ ...value });\n                    }\n                });\n                this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, values, this.props.node.name);\n            }\n            return false;\n        };\n        this.onLoadPreset = () => {\n        };\n        this.onGetData = () => {\n            let values = [];\n            this.state.data.map((value, index) => {\n                if (value.value == 1) {\n                    values.push({ ...value });\n                }\n            });\n            return values;\n        };\n        this.onSetData = (data) => {\n            let values = [];\n            let list = new Array((this.props.node.columns || 8) * (this.props.node.rows || 8)).fill(0).map((item, index) => {\n                return {\n                    value: 0,\n                    x: index % (this.props.node.columns || 8),\n                    y: Math.floor(index / (this.props.node.columns || 8))\n                };\n            });\n            data.map((value, index) => {\n                if (value.value == 1) {\n                    list[value.y * (this.props.node.columns || 8) + value.x].value = 1;\n                    values.push({ ...value });\n                }\n            });\n            this.setState({ data: list });\n            this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, values, this.props.node.name);\n        };\n    }\n    componentDidMount() {\n        console.log(\"componentDidMount slider\");\n        if (this.props.node) {\n            this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, this.props.node.defaultValue || 0, \"\");\n            this.setState({ data: new Array((this.props.node.columns || 8) *\n                    (this.props.node.rows || 8)).fill(0).map((item, index) => {\n                    return {\n                        value: 0,\n                        x: index % (this.props.node.columns || 8),\n                        y: Math.floor(index / (this.props.node.columns || 8))\n                    };\n                })\n            });\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.flow != this.props.flow) {\n            if (this.props.node) {\n                this.props.flowrunnerConnector.modifyFlowNode(this.props.node.name, this.props.node.propertyName, this.state.value, this.props.node.onChange || this.props.node.name);\n            }\n        }\n    }\n    componentWillUnmount() {\n        this.unmounted = true;\n    }\n    getWidth() {\n        return (((this.props.node && this.props.node.columns) || 8) * 16) + 20;\n    }\n    getHeight() {\n        return (((this.props.node && this.props.node.rows) || 8) * 16) + (3 * 16) + 4 + 150;\n    }\n    getCanvasHeight() {\n        return (((this.props.node && this.props.node.rows) || 8) * 16) + (1 * 16) + 4;\n    }\n    render() {\n        let circles = null;\n        let { node } = this.props;\n        if (!this.state.data) {\n            return null;\n        }\n        let list = this.state.data;\n        circles = list.map((matrixValue, index) => {\n            let circle = null;\n            let x = matrixValue.x;\n            let y = matrixValue.y;\n            if (matrixValue.value == 1) {\n                circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"xycanvas-gridedit-alive-\" + index },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-alive-circle-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 14, stroke: \"#000000\", strokeWidth: 2, width: 14, height: 14, opacity: 1, fill: \"#ffffff\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false }),\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-alive-inner-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 16, stroke: \"#ffffff\", strokeWidth: 2, width: 12, height: 12, opacity: 1, fill: \"#000000\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false }));\n            }\n            else {\n                circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvas-gridedit-dead-\" + index, x: (x * 16) + 18, y: (y * 16) + 10, radius: 14, stroke: \"#000000\", strokeWidth: 1, width: 14, height: 14, opacity: 1, fill: \"#ffffff\", onClick: this.clickCircle.bind(this, matrixValue), perfectDrawEnabled: false });\n            }\n            return circle;\n        });\n        list = null;\n        node = null;\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"html-plugin-node html-plugin-node__grid-edit\", style: {\n                backgroundColor: \"white\",\n                width: (this.getWidth() || this.props.node.width || 250) + \"px\",\n                height: (this.getHeight() || this.props.node.height || 250) + \"px\"\n            } },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Stage, { className: \"stage-div\", pixelRatio: 1, width: this.getWidth() || this.props.node.width || 250, height: (this.getCanvasHeight()) || this.props.node.height || 250 },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Layer, null, circles)),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_components_preset_manager__WEBPACK_IMPORTED_MODULE_2__.PresetManager, { node: this.props.node, onLoadPreset: this.onLoadPreset, onGetData: this.onGetData, onSetData: this.onSetData }));\n    }\n}\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/html-plugins/grid-edit.tsx?");

/***/ })

}]);