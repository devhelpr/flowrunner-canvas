/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["src_components_html-plugins_visualizers_grid-canvas_tsx"],{

/***/ "./src/components/html-plugins/visualizers/grid-canvas.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GridCanvas\": () => (/* binding */ GridCanvas)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/react-konva/es/ReactKonva.js\");\n\r\n\r\nclass GridCanvas extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {};\r\n    }\r\n    componentDidMount() {\r\n    }\r\n    getWidth() {\r\n        return ((this.props.node.columns || 8) * 16);\r\n    }\r\n    getHeight() {\r\n        return ((this.props.node.rows || 8) * 16);\r\n    }\r\n    render() {\r\n        let circles = null;\r\n        let { node, payloads } = this.props;\r\n        let list = (node.mode === \"matrix\" ? ((payloads[payloads.length - 1] || { data: [] }).data || []) : payloads);\r\n        let currentPayload = payloads[payloads.length - 1];\r\n        circles = list.map((payload, index) => {\r\n            let circle = null;\r\n            if (node.mode === \"matrix\") {\r\n                let x = index % (currentPayload.columns);\r\n                let y = Math.floor(index / currentPayload.rows);\r\n                if (payload >= 1 || payload <= -1) {\r\n                    circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvasgrid-\" + index, x: (x * 16) + 8, y: (y * 16) + 8, radius: 16, stroke: payload <= -1 ? \"#ff0000\" : \"#000000\", strokeWidth: 2, width: 16, height: 16, opacity: 1, fill: payload <= -1 ? \"#ff0000\" : \"#000000\", perfectDrawEnabled: false });\r\n                }\r\n                else if (payload != 0) {\r\n                    circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvasgrid-\" + index, x: (x * 16) + 8, y: (y * 16) + 8, radius: 16 * Math.abs(payload), stroke: payload < 0 ? \"#ff0000\" : \"#000000\", strokeWidth: 2, width: 16 * Math.abs(payload), height: 16 * Math.abs(payload), opacity: 1, fill: payload < 0 ? \"#ff0000\" : \"#000000\", perfectDrawEnabled: false });\r\n                }\r\n            }\r\n            else if (node.mode !== \"matrix\" && node.xProperty && node.yProperty) {\r\n                if (!isNaN(payload[node.xProperty]) && !isNaN(payload[node.yProperty])) {\r\n                    const opacity = node.ageProperty ? (payload[node.ageProperty] || (payload[node.ageProperty] === 0 ? 0 : 1)) : ((index + 1) / (payloads.length * 2));\r\n                    let indexNextLine = index + 1;\r\n                    if (index >= payloads.length - 1) {\r\n                        indexNextLine = 0;\r\n                    }\r\n                    circle = react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"xycanvas-wrapper\" + index },\r\n                        !!node.includeLines &&\r\n                            index < indexNextLine &&\r\n                            payload[node.xProperty] < payloads[indexNextLine][node.xProperty] &&\r\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Line, { points: [\r\n                                    payload[node.xProperty] * 16,\r\n                                    payload[node.yProperty] * 16,\r\n                                    payloads[indexNextLine][node.xProperty] * 16,\r\n                                    payloads[indexNextLine][node.yProperty] * 16\r\n                                ], tension: 0.5, opacity: opacity, stroke: \"black\" }),\r\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Circle, { key: \"xycanvasgrid-\" + index, x: (payload[node.xProperty] * 16), y: (payload[node.yProperty] * 16), radius: 16, stroke: \"#000000\", strokeWidth: 2, width: 16, height: 16, opacity: opacity, fill: \"#000000\", perfectDrawEnabled: false }));\r\n                }\r\n            }\r\n            return circle;\r\n        });\r\n        list = null;\r\n        currentPayload = null;\r\n        node = null;\r\n        payloads = null;\r\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Stage, { pixelRatio: 1, width: this.getWidth() || this.props.node.width || 250, height: this.getHeight() || this.props.node.height || 250 },\r\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_konva__WEBPACK_IMPORTED_MODULE_1__.Layer, null, circles));\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/html-plugins/visualizers/grid-canvas.tsx?");

/***/ })

}]);