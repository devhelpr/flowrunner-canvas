/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["src_components_userinterface-view_components_layout-renderer_tsx-src_components_userinterface-b7c08d"],{

/***/ "./src/components/flow/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Flow\": () => (/* binding */ Flow)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n\n\nconst Flow = (props) => {\n    const [internalFlow, setInternalFlow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        console.log(\"FLOW in flow component useEffect\", performance.now());\n        if (internalFlow.length != props.flow.length) {\n            setInternalFlow(props.flow);\n        }\n        else {\n            let changed = false;\n            let changedNode = \"\";\n            let changedNodeProperty = \"\";\n            let properties = [\"x\", \"y\", \"xstart\", \"ystart\", \"xend\", \"yend\"];\n            let perfstart = performance.now();\n            props.flow.map((node, index) => {\n                if (changed) {\n                    return true;\n                }\n                const internalNode = internalFlow[index];\n                {\n                    let nodeKeys = Object.keys(node);\n                    let internalNodeKeys = Object.keys(internalNode);\n                    {\n                        nodeKeys.map((nodeProperty) => {\n                            if (changed) {\n                                return;\n                            }\n                            if (properties.indexOf(nodeProperty) >= 0) {\n                                return;\n                            }\n                            if (node[nodeProperty] !== internalNode[nodeProperty]) {\n                                changed = true;\n                                changedNode = node.name;\n                                changedNodeProperty = nodeProperty;\n                            }\n                        });\n                        if (!changed) {\n                            internalNodeKeys.map((internalNodeProperty) => {\n                                if (changed) {\n                                    return;\n                                }\n                                if (properties.indexOf(internalNodeProperty) >= 0) {\n                                    return;\n                                }\n                                if (node[internalNodeProperty] !== internalNode[internalNodeProperty]) {\n                                    changed = true;\n                                    changedNode = node.name;\n                                    changedNodeProperty = internalNodeProperty;\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n            console.log(\"flow diffing time\", (performance.now() - perfstart) + \"ms\");\n            if (changed || !!props.flowrunnerConnector.forcePushToFlowRunner) {\n                console.log(\"flow changed\", changedNode, changedNodeProperty, props.flowrunnerConnector.forcePushToFlowRunner, props.flow);\n                props.flowrunnerConnector.forcePushToFlowRunner = false;\n                setInternalFlow(props.flow);\n            }\n        }\n    }, [props.flow, props.flowId]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        let perfstart = performance.now();\n        if (!internalFlow) {\n            return;\n        }\n        props.flowrunnerConnector.pushFlowToFlowrunner(internalFlow, true, props.flowId);\n        console.log(\"flow pushFlowToFlowrunner\", (performance.now() - perfstart) + \"ms\");\n    }, [internalFlow]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n};\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/flow/index.tsx?");

/***/ }),

/***/ "./src/components/userinterface-view/components/layout-renderer.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"renderFlowNode\": () => (/* binding */ renderFlowNode),\n/* harmony export */   \"renderLayoutType\": () => (/* binding */ renderLayoutType)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var _helpers_flow_to_canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/helpers/flow-to-canvas.ts\");\n/* harmony import */ var _helpers_shape_settings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/helpers/shape-settings.ts\");\n/* harmony import */ var _multi_form__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/components/userinterface-view/components/multi-form.tsx\");\n\n\n\n\nconst renderFlowNode = (node, rootLayout, isInEditMode = false) => {\n    if (!!node.hideFromUI) {\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n    }\n    const onShowNodeSettings = () => {\n    };\n    let shapeType = _helpers_flow_to_canvas__WEBPACK_IMPORTED_MODULE_1__.FlowToCanvas.getShapeType(node.shapeType, node.taskType, node.isStartEnd);\n    const settings = _helpers_shape_settings__WEBPACK_IMPORTED_MODULE_2__.ShapeSettings.getShapeSettings(node.taskType, node);\n    if (shapeType === \"Html\" && !!settings.hasUI) {\n        const nodeClone = { ...node };\n        const isSelected = false;\n        nodeClone.htmlPlugin = node.htmlPlugin || settings.htmlPlugin || \"\";\n        let width = undefined;\n        let height = undefined;\n        if (rootLayout.context.getNodeInstance) {\n            const instance = rootLayout.context.getNodeInstance(node, rootLayout.context.flowrunnerConnector, rootLayout.context.flow, settings);\n            if (instance) {\n                if (instance.getWidth && instance.getHeight) {\n                    width = instance.getWidth(node);\n                    height = instance.getHeight(node);\n                }\n            }\n        }\n        if (settings.uiComponent && settings.uiComponent == \"MultiForm\") {\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_multi_form__WEBPACK_IMPORTED_MODULE_3__.MultiForm, { node: nodeClone, settings: settings, renderHtmlNode: rootLayout.context.renderHtmlNode, getNodeInstance: rootLayout.context.getNodeInstance, flowrunnerConnector: rootLayout.context.flowrunnerConnector });\n        }\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: {\n                width: (width || node.width || 250) + \"px\",\n                minHeight: (height || node.height || 250) + \"px\",\n                height: \"auto\",\n                opacity: 1,\n                position: \"relative\"\n            }, id: node.name, \"data-task\": node.taskType, \"data-node\": node.name, \"data-html-plugin\": nodeClone.htmlPlugin, \"data-node-type\": node.taskType, \"data-visualizer\": nodeClone.visualizer || \"\", \"data-x\": node.x, \"data-y\": node.y, className: \"canvas__html-shape untouched\" },\n            !!isInEditMode && settings && !!settings.hasConfigMenu &&\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"\" },  false && 0),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"canvas__html-shape-body\" }, rootLayout.context.renderHtmlNode && rootLayout.context.renderHtmlNode(nodeClone, rootLayout.context.flowrunnerConnector, rootLayout.context.flow, settings)));\n    }\n};\nconst renderLayoutType = (layoutBlock, isInForm, form, setLayoutVisibleState, rootLayout) => {\n    if (layoutBlock.type === \"layout2columns\") {\n        if (!layoutBlock.layout && layoutBlock.layout.length !== 2) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n        }\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"layout-container__layout2columns\" },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"row\" },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-12 col-md-6\" },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ui-view-layout__container-row layout-container__layout2columns-col-1\" }, layoutBlock.layout[0].map((layout, index) => {\n                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"layout-\" + index },\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ui-view-layout__container d-flex flex-row justify-content-center\" }, renderLayoutType(layout, isInForm, form, setLayoutVisibleState, rootLayout)));\n                    }))),\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-12 col-md-6 \" },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ui-view-layout__container-row layout-container__layout2columns-col-2\" }, layoutBlock.layout[1].map((layout, index) => {\n                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"layout-\" + index },\n                            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ui-view-layout__container d-flex flex-row justify-content-center\" }, renderLayoutType(layout, isInForm, form, setLayoutVisibleState, rootLayout)));\n                    })))));\n    }\n    else if (layoutBlock.type === \"layout\") {\n        if (!layoutBlock.layout) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n        }\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"row\" },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-12 ui-view-layout__container-row\" }, layoutBlock.layout.map((layout, index) => {\n                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: \"layout-\" + index },\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"ui-view-layout__container d-flex flex-row justify-content-center\" }, renderLayoutType(layout, isInForm, form, setLayoutVisibleState, rootLayout)));\n                }))));\n    }\n    else if (layoutBlock.type === \"element\") {\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, layoutBlock.title || \"\");\n    }\n    else if (layoutBlock.type === \"flowNode\") {\n        const node = rootLayout.context.flowHash[layoutBlock.subtitle];\n        if (node) {\n            return renderFlowNode(node, rootLayout, false);\n        }\n        return null;\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n};\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/userinterface-view/components/layout-renderer.tsx?");

/***/ }),

/***/ "./src/components/userinterface-view/components/multi-form.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultiForm\": () => (/* binding */ MultiForm)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var _flow_connector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/flow-connector/index.ts\");\n/* harmony import */ var _userinterface_view_multi_form_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./src/components/userinterface-view/multi-form-view.tsx\");\n/* harmony import */ var _flow_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/flow-agent.ts\");\n\n\n\n\n\nconst MultiForm = (props) => {\n    var _a, _b, _c, _d;\n    const [formStep, setFormStep] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [flowEnabled, setFlowEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const workerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const flowrunnerConnector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        workerRef.current = (0,_flow_agent__WEBPACK_IMPORTED_MODULE_3__.getFlowAgent)();\n        workerRef.current.postMessage(\"worker\", {\n            command: 'init'\n        });\n        flowrunnerConnector.current = new _flow_connector__WEBPACK_IMPORTED_MODULE_1__.FlowConnector();\n        flowrunnerConnector.current.registerWorker(workerRef.current);\n        setFlowEnabled(true);\n        return () => {\n            if (workerRef.current) {\n                workerRef.current.terminate();\n                workerRef.current = null;\n            }\n        };\n    }, [props.node, formStep]);\n    const onNextStep = (event) => {\n        var _a, _b;\n        event.preventDefault();\n        if (formStep < ((_b = (_a = props.node) === null || _a === void 0 ? void 0 : _a.formFlows) === null || _b === void 0 ? void 0 : _b.length) - 1) {\n            setFlowEnabled(false);\n            setFormStep(formStep + 1);\n        }\n        return false;\n    };\n    const onPreviousStep = (event) => {\n        event.preventDefault();\n        if (formStep > 0) {\n            setFlowEnabled(false);\n            setFormStep(formStep - 1);\n        }\n        return false;\n    };\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null,\n            \"MultiForm form-step: \",\n            formStep + 1,\n            \" / \", (_b = (_a = props.node) === null || _a === void 0 ? void 0 : _a.formFlows) === null || _b === void 0 ? void 0 :\n            _b.length),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, flowEnabled && props.node && props.node.formFlows && props.node.formFlows.length > 0 &&\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"card\" },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"card-body\" },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_userinterface_view_multi_form_view__WEBPACK_IMPORTED_MODULE_2__.MultiFormView, { renderHtmlNode: props.renderHtmlNode, getNodeInstance: props.getNodeInstance, flowrunnerConnector: flowrunnerConnector.current, flowId: props.node.formFlows[formStep].flowId })))),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"row mt-2\" },\n            formStep > 0 &&\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-auto\" },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"btn btn-outline-primary\", onClick: onPreviousStep }, \"Previous\")),\n            formStep < ((_d = (_c = props.node) === null || _c === void 0 ? void 0 : _c.formFlows) === null || _d === void 0 ? void 0 : _d.length) - 1 &&\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"col-auto\" },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"btn btn-primary\", onClick: onNextStep }, \"Next\"))));\n};\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/userinterface-view/components/multi-form.tsx?");

/***/ }),

/***/ "./src/components/userinterface-view/multi-form-view.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultiFormView\": () => (/* binding */ MultiFormView)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/react/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/uuid/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _devhelpr_layoutrunner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@devhelpr/layoutrunner/dist/layoutrunner.esm.js\");\n/* harmony import */ var _components_layout_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./src/components/userinterface-view/components/layout-renderer.tsx\");\n/* harmony import */ var _flow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"./src/components/flow/index.tsx\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _state_flow_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"./src/state/flow-state.ts\");\n/* harmony import */ var _state_layout_state__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"./src/state/layout-state.ts\");\n/* harmony import */ var _state_canvas_mode_state__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"./src/state/canvas-mode-state.ts\");\n\n\n\n\n\n\n\n\n\n\nconst uuidV4 = uuid__WEBPACK_IMPORTED_MODULE_1__.v4;\nconst MultiFormView = (props) => {\n    const [flowName, setFlowName] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [flowHash, setFlowHash] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [titleBarBackgroundcolor, setTitleBarBackgroundcolor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [titleBarTitle, setTitleBarTitle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [titleBarColor, setTitleBarColor] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [titleBarFont, setTitleBarFont] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [titleBarFontSize, setTitleBarFontSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [titleBarFontWeight, setTitleBarFontWeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [layoutTree, setLayoutTree] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [isFlowLoaded, setIsFlowLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const unmounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const layoutTreeAsString = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(\"\");\n    const flow = (0,_state_flow_state__WEBPACK_IMPORTED_MODULE_6__.useFlowForMultiFormStore)();\n    const canvasMode = (0,_state_canvas_mode_state__WEBPACK_IMPORTED_MODULE_8__.useCanvasModeStateForMultiFormStore)();\n    const layout = (0,_state_layout_state__WEBPACK_IMPORTED_MODULE_7__.useLayoutForMultiFormStore)();\n    let nodesStateLocal = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    let touchedNodesLocal = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const getLayoutNodeFromTree = (level, index, subIndex) => {\n        let treeHashKey = level + \".\" + index + \".\" + subIndex;\n        if (layoutTreeAsString.current && layoutTreeAsString.current[treeHashKey]) {\n            let tree = layoutTreeAsString.current[treeHashKey];\n            let layoutTreeNode = [];\n            tree.map((layoutBlock, treeIndex) => {\n                if (layoutBlock.title == \"element\") {\n                    layoutTreeNode.push({\n                        type: \"element\",\n                        title: layoutBlock.title,\n                        subtitle: layoutBlock.subtitle || \"\"\n                    });\n                }\n                else if (layoutBlock.title == \"flowNode\") {\n                    layoutTreeNode.push({\n                        type: \"flowNode\",\n                        title: layoutBlock.title,\n                        subtitle: layoutBlock.subtitle || \"\",\n                        name: layoutBlock.subtitle || \"\"\n                    });\n                }\n                else if (layoutBlock.title == \"layout2columns\") {\n                    layoutTreeNode.push({\n                        type: \"layout2columns\",\n                        title: layoutBlock.title,\n                        layout: [getLayoutNodeFromTree(level + 1, treeIndex, 0),\n                            getLayoutNodeFromTree(level + 1, treeIndex, 1),\n                        ]\n                    });\n                }\n                else {\n                    layoutTreeNode.push({\n                        type: \"layout\",\n                        title: layoutBlock.title,\n                        layout: getLayoutNodeFromTree(level + 1, treeIndex, 0)\n                    });\n                }\n            });\n            return layoutTreeNode;\n        }\n        return [];\n    };\n    const screenUICallback = (command) => {\n        if (command && command.action == \"SendScreen\" && command.payload) {\n            const payload = command.payload;\n            if (payload.titleBarBackgroundcolor) {\n                setTitleBarBackgroundcolor(payload.titleBarBackgroundcolor);\n            }\n            if (payload.titleBarColor) {\n                setTitleBarColor(payload.titleBarColor);\n            }\n            if (payload.titleBarFont) {\n                setTitleBarFont(payload.titleBarFont);\n            }\n            if (payload.titleBarFontSize) {\n                setTitleBarFontSize(payload.titleBarFontSize);\n            }\n            if (payload.titleBarFontWeight) {\n                setTitleBarFontWeight(payload.titleBarFontWeight);\n            }\n            if (payload.titleBarFontWeight) {\n                setTitleBarFontWeight(payload.titleBarFontWeight);\n            }\n            if (payload.titleBarTitle) {\n                setTitleBarTitle(payload.titleBarTitle);\n            }\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        props.flowrunnerConnector.registerScreenUICallback(screenUICallback);\n        props.flowrunnerConnector.unregisterNodeStateObserver(\"canvas\");\n        props.flowrunnerConnector.registerNodeStateObserver(\"canvas\", nodeStateObserver);\n        const paths = location.pathname.split(\"/\");\n        if (props.flowrunnerConnector.hasStorageProvider) {\n            loadFlow(\"flow\");\n        }\n        else if (props.flowId !== undefined && props.flowId !== \"\") {\n            loadFlow(props.flowId);\n        }\n        else if (paths.length > 2) {\n            if (paths[1] == \"ui\") {\n                const flowId = paths[2];\n                if (flowId !== undefined) {\n                    loadFlow(flowId);\n                }\n                else {\n                    console.error(\"No flowId specified\");\n                }\n            }\n        }\n        return () => {\n            unmounted.current = true;\n            props.flowrunnerConnector.unregisterNodeStateObserver(\"canvas\");\n        };\n    }, []);\n    const setupFlow = (flowPackage, flowId) => {\n        setTimeout(() => {\n            if (flowPackage.flowType === \"playground\") {\n                props.flowrunnerConnector.setFlowType(flowPackage.flowType || \"playground\");\n                canvasMode.setFlowrunnerPaused(false);\n                canvasMode.setFlowType(flowPackage.flowType || \"playground\");\n                flow.storeFlow(flowPackage.flow, flowId);\n                layout.storeLayout(JSON.stringify(flowPackage.layout));\n                let flowHash = {};\n                flowPackage.flow.map((node) => {\n                    flowHash[node.name] = node;\n                    return true;\n                });\n                setFlowName(flowPackage.name);\n                setFlowHash(flowHash);\n                setIsFlowLoaded(true);\n            }\n        }, 500);\n    };\n    const loadFlow = (flowId) => {\n        var _a;\n        if (props.flowrunnerConnector.hasStorageProvider) {\n            const flowPackage = (_a = props.flowrunnerConnector.storageProvider) === null || _a === void 0 ? void 0 : _a.getFlow(flowId);\n            setupFlow(flowPackage, flowId);\n            return;\n        }\n        cross_fetch__WEBPACK_IMPORTED_MODULE_5___default()('/flowui?flow=' + flowId)\n            .then(res => {\n            if (res.status >= 400) {\n                throw new Error(\"Bad response from server\");\n            }\n            return res.json();\n        })\n            .then(flowPackage => {\n            setupFlow(flowPackage, flowId);\n        })\n            .catch(err => {\n            console.error(err);\n        });\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        layoutTreeAsString.current = JSON.parse(layout.layout) || {};\n        setLayoutTree(getLayoutNodeFromTree(1, 0, 0));\n        updateTouchedNodes();\n    }, [layout, flow]);\n    const updateTouchedNodes = () => {\n        if (touchedNodesLocal.current) {\n            Object.keys(touchedNodesLocal.current).map((touchNodeId) => {\n                const element = document.getElementById(touchNodeId);\n                if (element) {\n                    if (touchedNodesLocal.current[touchNodeId] === true) {\n                        element.classList.remove(\"untouched\");\n                    }\n                    else {\n                        element.classList.add(\"untouched\");\n                    }\n                }\n            });\n        }\n    };\n    const nodeStateObserver = (nodeName, nodeState, touchedNodes) => {\n        nodesStateLocal.current[nodeName] = nodeState;\n        touchedNodesLocal.current = touchedNodes;\n        updateTouchedNodes();\n    };\n    if (!isFlowLoaded) {\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n    }\n    let title = flowName || \"UserInterface View\";\n    if (titleBarTitle !== \"\") {\n        title = titleBarTitle;\n    }\n    let style = {};\n    let navContainerClassName = \"mb-4\";\n    let navbarClassName = \"navbar navbar-expand-lg navbar-light\";\n    let h1ClassName = \"text-black\";\n    if (titleBarBackgroundcolor) {\n        style.backgroundColor = titleBarBackgroundcolor;\n        navContainerClassName = \"mb-4\";\n        navbarClassName = \"navbar navbar-expand-lg navbar-light\";\n    }\n    if (titleBarColor) {\n        style.color = titleBarColor;\n        h1ClassName = \"\";\n    }\n    if (titleBarFont) {\n        style.fontFamily = titleBarFont;\n    }\n    if (titleBarFontSize) {\n        style.fontSize = titleBarFontSize;\n    }\n    if (titleBarFontWeight) {\n        style.fontWeight = titleBarFontWeight;\n    }\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"pb-4 container__background\" },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { style: style, className: navContainerClassName },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"nav\", { style: style, className: navbarClassName },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", { className: h1ClassName }, title))),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"container container__ui-view\" },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_devhelpr_layoutrunner__WEBPACK_IMPORTED_MODULE_2__.Layout, { nodeName: \"ui\", renderLayoutType: _components_layout_renderer__WEBPACK_IMPORTED_MODULE_3__.renderLayoutType, payload: {\n                    layout: layoutTree,\n                    context: {\n                        flowHash: flowHash,\n                        flow: flow.flow,\n                        getNodeInstance: props.getNodeInstance,\n                        flowrunnerConnector: props.flowrunnerConnector,\n                        renderHtmlNode: props.renderHtmlNode\n                    }\n                } })),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_flow__WEBPACK_IMPORTED_MODULE_4__.Flow, { flow: flow.flow, flowId: flow.flowId, flowrunnerConnector: props.flowrunnerConnector }));\n};\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/components/userinterface-view/multi-form-view.tsx?");

/***/ }),

/***/ "./src/helpers/shape-settings.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ShapeSettings\": () => (/* binding */ ShapeSettings)\n/* harmony export */ });\n/* harmony import */ var _components_canvas_shapes_shape_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./src/components/canvas/shapes/shape-types.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./src/config.ts\");\n\n\nclass ShapeSettings {\n    static getShapeSettings(taskType, node) {\n        let settings = {\n            strokeColor: '#000000',\n            fillColor: _components_canvas_shapes_shape_types__WEBPACK_IMPORTED_MODULE_0__.shapeBackgroundColor,\n            fillSelectedColor: _components_canvas_shapes_shape_types__WEBPACK_IMPORTED_MODULE_0__.shapeSelectedBackgroundColor,\n            textColor: '#000000',\n            cornerRadius: 0,\n            isSkewed: false,\n            hasUI: false,\n        };\n        const taskTypeConfig = (0,_config__WEBPACK_IMPORTED_MODULE_1__.getTaskConfigForTask)(taskType);\n        if (taskTypeConfig) {\n            let variableSettings = {};\n            if (node && !!node.hasVariableAttached) {\n                variableSettings = taskTypeConfig['_variable'];\n            }\n            if (node && node.objectSchema && taskTypeConfig[node.objectSchema]) {\n                settings = {\n                    ...settings,\n                    ...taskTypeConfig,\n                    ...variableSettings,\n                    ...taskTypeConfig[node.objectSchema],\n                };\n            }\n            else {\n                settings = { ...settings, ...taskTypeConfig, ...variableSettings };\n            }\n        }\n        return settings;\n    }\n}\n\n\n//# sourceURL=webpack://@devhelpr/flowrunner-canvas/./src/helpers/shape-settings.ts?");

/***/ })

}]);