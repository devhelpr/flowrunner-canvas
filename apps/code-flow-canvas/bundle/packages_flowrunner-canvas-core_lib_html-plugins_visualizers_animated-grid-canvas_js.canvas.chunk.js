"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["flowcanvaswebpackJsonpPlugin"] = self["flowcanvaswebpackJsonpPlugin"] || []).push([["packages_flowrunner-canvas-core_lib_html-plugins_visualizers_animated-grid-canvas_js"],{

/***/ "../../packages/flowrunner-canvas-core/lib/html-plugins/visualizers/animated-grid-canvas.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AnimatedGridCanvas\": () => (/* binding */ AnimatedGridCanvas)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"../../node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_konva__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"../../node_modules/react-konva/es/ReactKonva.js\");\n/* harmony import */ var _devhelpr_flowrunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"../../node_modules/@devhelpr/flowrunner/dist/flowrunner.esm.js\");\n/* harmony import */ var _flowrunner_plugins_components_webassembly__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"../../packages/flowrunner-canvas-core/lib/flowrunner-plugins/components/webassembly.js\");\n/* harmony import */ var _devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"../../node_modules/@devhelpr/expressionrunner/dist/expressionrunner.esm.js\");\n\n\n\n\n\n\n\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.PI', (a, ...args) => {\n    return Math.PI;\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.sqrt', (a, ...args) => {\n    return Math.sqrt(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.sin', (a, ...args) => {\n    return Math.sin(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('sin', (a, ...args) => {\n    return Math.sin(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('hypot', (a, ...args) => {\n    return Math.hypot(a, args[0]);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.sindegree', (a, ...args) => {\n    return Math.sin((a * Math.PI) / 180);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.random', (a, ...args) => {\n    return Math.random();\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.atan', (a, ...args) => {\n    return Math.atan(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.floor', (a, ...args) => {\n    return Math.floor(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.ceil', (a, ...args) => {\n    return Math.ceil(a);\n});\n(0,_devhelpr_expressionrunner__WEBPACK_IMPORTED_MODULE_5__.registerExpressionFunction)('Math.round', (a, ...args) => {\n    return Math.round(a);\n});\nconst AnimatedGridCanvas = (props) => {\n    const [payload, setPayload] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({ data: [] });\n    const [performanceTimer, setPerformanceTimer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const active = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(true);\n    const flowIsRunning = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    const flowRunner = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new _devhelpr_flowrunner__WEBPACK_IMPORTED_MODULE_3__.FlowEventRunner());\n    let circleRefs = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    let canvas = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let perftext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let stage = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let textRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let wasmRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let lastTime = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(performance.now());\n    let activeScript = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    let scriptId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    let canvasMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(\"\");\n    let rafHandler = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let currentWidth = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let currentHeight = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    let fps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const runWasm = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((lastPayload, width, height) => {\n        if (!wasmRef.current) {\n            console.log(\"wasmRef is empty\");\n            return;\n        }\n        let data = wasmRef.current;\n        if (!data) {\n            return;\n        }\n        console.log(\"runwasm\", width, height);\n        let buffer = null;\n        try {\n            buffer = new Uint8Array(data.instance.exports.memory.buffer, 0, width * height * 4);\n        }\n        catch (err) {\n            console.log(\"runwasm error\", err);\n            return;\n        }\n        let context;\n        let imageData;\n        if (canvasMode.current === \"pixels\" && canvas.current) {\n            context = canvas.current.getContext('2d');\n            imageData = context.createImageData(width, height);\n        }\n        let currentScriptId = scriptId.current;\n        let inputParameters = [];\n        (wasmRef.current.inputVariables).map((input) => {\n            inputParameters.push(0);\n        });\n        if (lastPayload) {\n            (wasmRef.current.inputVariables).map((input, index) => {\n                inputParameters[index] = Number(lastPayload[input]) || 0;\n            });\n        }\n        const wasmSize = (data.wasm.length / 1000).toFixed(2);\n        let quitRenderLoop = false;\n        if (canvasMode.current === \"circles\") {\n            const renderLoop = () => {\n                if (!active.current) {\n                    return;\n                }\n                if (currentScriptId != scriptId.current) {\n                    console.log(\"quit renderloop\");\n                    return;\n                }\n                if (!quitRenderLoop) {\n                    rafHandler.current = requestAnimationFrame(renderLoop);\n                }\n                let perfStart = performance.now();\n                for (let y = 0; y < 16; y++) {\n                    for (let x = 0; x < 16; x++) {\n                        let time = performance.now() - lastTime.current;\n                        const result = data.mainFunction(data.instance, x, y, y * 16 + x, time, width, height, ...inputParameters);\n                        let radius = 0;\n                        let stroke = \"\";\n                        let fill = \"\";\n                        let circlewidth = 13;\n                        let circleheight = 13;\n                        if (result >= 1 || result <= -1) {\n                            radius = 13;\n                            stroke = result <= -1 ? \"#ff0000\" : \"#000000\";\n                            fill = result <= -1 ? \"#ff0000\" : \"#000000\";\n                        }\n                        else if (result != 0) {\n                            radius = 13 * Math.abs(result);\n                            stroke = result < 0 ? \"#ff0000\" : \"#000000\";\n                            fill = result < 0 ? \"#ff0000\" : \"#000000\";\n                            circlewidth = 13 * Math.abs(result);\n                            circleheight = 13 * Math.abs(result);\n                        }\n                        let circle = circleRefs.current[\"circle\" + (y * 16 + x)];\n                        if (circle) {\n                            circle.radius(radius);\n                            circle.stroke(stroke);\n                            circle.width(circlewidth);\n                            circle.height(circleheight);\n                            circle.fill(fill);\n                        }\n                    }\n                }\n                const perfEnd = performance.now() - perfStart;\n                if (textRef && textRef.current) {\n                    textRef.current.text(perfEnd.toFixed(2) + \"ms - \" + wasmSize + \"kb\");\n                }\n                if (stage && stage.current) {\n                    let stageInstance = stage.current.getStage();\n                    stageInstance.draw();\n                }\n            };\n            rafHandler.current = requestAnimationFrame(renderLoop);\n        }\n        else if (canvasMode.current === \"pixels\") {\n            let counter = 0;\n            fps.current = performance.now();\n            const renderLoopPixels = () => {\n                if (!active.current) {\n                    return;\n                }\n                if (currentScriptId != scriptId.current) {\n                    return;\n                }\n                if (quitRenderLoop) {\n                    return;\n                }\n                if (!buffer) {\n                    return;\n                }\n                rafHandler.current = requestAnimationFrame(renderLoopPixels);\n                let time = performance.now() - lastTime.current;\n                const result = data.mainFunction(data.instance, 0, 0, 0, time, width, height, ...inputParameters);\n                imageData.data.set(buffer);\n                context.putImageData(imageData, 0, 0);\n                const perfEnd = performance.now() - fps.current;\n                fps.current = performance.now();\n                counter++;\n                if (counter > 25) {\n                    counter = 0;\n                    perftext.current.innerText = wasmSize + \"kb - \" + (1000 / perfEnd).toFixed(0) + \"fps\";\n                }\n            };\n            rafHandler.current = requestAnimationFrame(renderLoopPixels);\n        }\n        return () => {\n            console.log(\"quit renderloop\");\n            quitRenderLoop = true;\n            buffer = undefined;\n        };\n    }, [props.node, props.node.width, props.node.height]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        active.current = true;\n        if (props.payloads.length == 0) {\n            return;\n        }\n        canvasMode.current = props.node.mode;\n        if (rafHandler.current) {\n            cancelAnimationFrame(rafHandler.current);\n            rafHandler.current = undefined;\n        }\n        console.log(\"AnimatedGridCanvas, start useEffect\");\n        let currentScript = props.payloads[props.payloads.length - 1].script;\n        if (!wasmRef.current ||\n            (!currentWidth.current) ||\n            (!currentHeight.current) ||\n            (currentWidth.current != (props.node.width || 256)) ||\n            (currentHeight.current != (props.node.height || 256)) ||\n            (currentScript !== undefined && currentScript !== \"\" &&\n                currentScript !== activeScript.current)) {\n            console.log(\"retrieve fresh webassembly\", props.node.width, props.node.height);\n            wasmRef.current = null;\n            activeScript.current = currentScript;\n            currentWidth.current = props.node.width || 256;\n            currentHeight.current = props.node.height || 256;\n            (0,_flowrunner_plugins_components_webassembly__WEBPACK_IMPORTED_MODULE_4__.getWebassembly)(currentScript, currentWidth.current, currentHeight.current).then((data) => {\n                if (data === false) {\n                    return;\n                }\n                wasmRef.current = data;\n                scriptId.current = scriptId.current + 1;\n                runWasm(props.payloads[props.payloads.length - 1], currentWidth.current, currentHeight.current);\n            });\n        }\n        else {\n            console.log(\"reuse existing webassembly\");\n            if (activeScript.current && activeScript.current !== \"\" && wasmRef.current) {\n                console.log(\"pre runwasm\");\n                runWasm(props.payloads[props.payloads.length - 1], currentWidth.current, currentHeight.current);\n            }\n        }\n        return () => {\n            console.log(\"AnimatedGridCanvas, unsubscribe useEffect\");\n            if (active) {\n                active.current = false;\n            }\n            if (rafHandler.current) {\n                cancelAnimationFrame(rafHandler.current);\n                rafHandler.current = undefined;\n            }\n            if (flowRunner && flowRunner.current && flowIsRunning && flowIsRunning.current) {\n                flowRunner.current.destroyFlow();\n            }\n        };\n    }, [props.node, props.payloads, props.node.width, props.node.height]);\n    const getWidth = () => {\n        return props.node.width || ((props.node.columns || 8) * 16);\n    };\n    const getHeight = () => {\n        return props.node.height || ((props.node.rows || 8) * 16);\n    };\n    let circles = null;\n    let { node } = props;\n    if (node.mode === \"circles\") {\n        circles = [];\n        for (let y = 0; y < 16; y++) {\n            for (let x = 0; x < 16; x++) {\n                let index = y * 16 + x;\n                let radius = 0;\n                let stroke = \"\";\n                let fill = \"\";\n                let width = 13;\n                let height = 13;\n                let circle = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Circle, { x: (x * 16) + 8, y: (y * 16) + 8, ref: ref => (circleRefs.current[\"circle\" + index] = ref), radius: radius, stroke: stroke, strokeWidth: 2, width: width, height: height, opacity: 1, fill: fill, listening: false, transformsEnabled: \"position\", perfectDrawEnabled: false }, \"xycanvasgrid-\" + index);\n                circles.push(circle);\n            }\n        }\n    }\n    else if (node.mode === \"pixels\") {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(\"div\", { style: {\n                position: \"relative\",\n                width: node.width ? node.width + \"px\" : \"256px\",\n                height: node.height ? node.height + \"px\" : \"256px\",\n                alignSelf: \"center\",\n                marginTop: \"auto\",\n                marginBottom: \"auto\",\n                maxWidth: \"100%\"\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { ref: ref => (perftext.current = ref), style: { position: \"absolute\", top: \"0px\", left: \"0px\", background: \"rgba(0,0,0,0.5)\", color: \"#ffffff\" }, children: \"0\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"canvas\", { ref: ref => (canvas.current = ref), width: node.width || 256, height: node.height || 256 })] });\n    }\n    node = null;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Stage, { pixelRatio: 1, listening: false, ref: ref => (stage.current = ref), width: getWidth() || props.node.width || 250, height: getHeight() || props.node.height || 250, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Layer, { listening: false, children: [circles, (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Rect, { x: 4, y: 4, height: 32, width: 100, opacity: 0.5, fill: \"#000000\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_konva__WEBPACK_IMPORTED_MODULE_2__.Text, { align: \"left\", ref: ref => (textRef.current = ref), fontSize: 18, y: 4, x: 4, height: 32, verticalAlign: \"middle\", fill: \"#ffffff\", text: performanceTimer.toFixed(2) + \"ms\" })] }) });\n};\n//# sourceMappingURL=animated-grid-canvas.js.map\n\n//# sourceURL=webpack://code-flow-canvas/../../packages/flowrunner-canvas-core/lib/html-plugins/visualizers/animated-grid-canvas.js?");

/***/ })

}]);