import * as React from 'react';
import { FlowConnector } from './flow-connector';
import { IFlowrunnerConnector } from './interfaces/IFlowrunnerConnector';
export type { IFlowrunnerConnector, IExecutionEvent } from './interfaces/IFlowrunnerConnector';
export { ApplicationMode } from './interfaces/IFlowrunnerConnector';
import { IStorageProvider } from './interfaces/IStorageProvider';
import { setCustomConfig } from './config';
import { createIndexedDBStorageProvider, setDefaultFlow, setDefaultFlowTitle, setTasks } from './flow-indexeddb-provider';
import { useFlowStore } from './state/flow-state';
import { IFlowAgent } from './interfaces/IFlowAgent';
import { IModalSize } from './interfaces/IModalSize';
import { INodeDependency } from './interfaces/INodeDependency';
import { FormNodeDatasourceProvider, useFormNodeDatasourceContext } from './components/contexts/form-node-datasource-context';
export declare const flowrunnerLocalStorageProvider: IStorageProvider;
export declare const configurableFlowrunnerLocalStorageProvider: IStorageProvider;
export declare const readOnlyFlowrunnerLocalStorageProvider: IStorageProvider;
export { createIndexedDBStorageProvider, setDefaultFlow, setDefaultFlowTitle, setTasks };
export { FormNodeDatasourceProvider, useFormNodeDatasourceContext };
export * from "./state-machine";
export declare const registerFlowRunnerCanvasPlugin: (name: any, VisualizationComponent: any, FlowTaskPlugin: any, FlowTaskPluginClassName: any, flowType?: string | undefined) => void;
export declare const addRegisterFunction: (registerFunction: () => void) => void;
export type { INodeDependency };
export type { IFlowAgent };
export type { IStorageProvider };
export { FlowConnector };
export { setCustomConfig };
export { useFlowStore };
export interface IFlowrunnerCanvasProps {
    hasShowDependenciesInMenu?: boolean;
    hasTaskNameAsNodeTitle?: boolean;
    hasCustomNodesAndRepository?: boolean;
    hasJSONEditInMenu?: boolean;
    modalSize?: IModalSize;
    developmentMode?: boolean;
    flowStorageProvider?: IStorageProvider;
    flowrunnerConnector?: IFlowrunnerConnector;
    pluginRegistry?: any;
    showsStateMachineUpdates?: boolean;
    onMessageFromFlow?: (message: any, flowAgent: IFlowAgent) => void;
    getNodeDependencies?: (nodeName: string) => INodeDependency[];
    renderMenuOptions?: () => JSX.Element;
    onFlowHasChanged?: (flow: any) => void;
}
export declare const FlowrunnerCanvas: React.MemoExoticComponent<(props: IFlowrunnerCanvasProps) => JSX.Element>;
export declare const startEditor: (flowStorageProvider?: IStorageProvider | undefined, doLocalStorageFlowEditorOnly?: boolean | undefined) => Promise<void>;
