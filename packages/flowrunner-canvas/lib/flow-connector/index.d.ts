import { IFlowrunnerConnector, IExecutionEvent, ApplicationMode } from '../interfaces/IFlowrunnerConnector';
import { IFlowAgent } from '../interfaces/IFlowAgent';
import { IStorageProvider } from '../interfaces/IStorageProvider';
export declare class EmptyFlowConnector implements IFlowrunnerConnector {
    storageProvider: IStorageProvider | undefined;
    hasStorageProvider: boolean;
    flowView: string;
    forcePushToFlowRunner: boolean;
    getNodeExecutions(): never[];
    getNodeExecutionsByNodeName(nodeName: any): never[];
    registerWorker(worker: IFlowAgent): void;
    onMessage: (event: any) => void;
    registerNodeStateObserver: (observableId: string, callback: (nodeName: string, nodeState: string, touchedNodes: any) => void) => void;
    unregisterNodeStateObserver: (observableId: string) => void;
    registerFlowNodeObserver: (nodeName: string, observableId: string, callback: (payload: any) => void) => void;
    unregisterFlowNodeObserver: (nodeName: any, observableId: any) => void;
    registerFlowExecutionObserver: (observableId: string, callback: (executionEvent: IExecutionEvent) => void) => void;
    unregisterFlowExecuteObserver: (observableId: any) => void;
    updateFlowNode: () => void;
    resetCurrentFlow: () => void;
    pushFlowToFlowrunner: (flow: any, autoStartNodes: boolean | undefined, flowId: string) => void;
    executeFlowNode: (nodeName: string, payload?: any) => void;
    modifyFlowNode: (nodeName: string, propertyName: string, value: any, executeNode?: string | undefined, eventName?: string | undefined, additionalValues?: any, isBundledNode?: boolean | undefined, bundleNodeId?: string | undefined) => void;
    isActiveFlowRunner: () => boolean;
    setPluginRegistry: (pluginRegistry: any) => void;
    getPluginRegistry: () => {};
    pauseFlowrunner: () => void;
    resumeFlowrunner: () => void;
    setFlowType: (flowType: string) => void;
    setAppMode: (mode: ApplicationMode) => void;
    getAppMode: () => ApplicationMode;
    registerScreenUICallback: (callback: (action: any) => void) => void;
    registerDestroyAndRecreateWorker: (onDestroyAndRecreateWorker: any) => void;
    killAndRecreateWorker: () => void;
    registerOnReceiveFlowNodeExecuteResult: (onReceiveFlowNodeExecuteResult: any) => void;
    runTests: (flowId: string) => void;
    getTasksFromPluginRegistry: () => never[];
}
export declare class FlowConnector implements IFlowrunnerConnector {
    storageProvider: IStorageProvider | undefined;
    hasStorageProvider: boolean;
    worker?: IFlowAgent;
    observables: any[];
    nodeExecutions: any[];
    nodeExecutionsByNode: any;
    pluginRegistry: any;
    flowType: string;
    applicationMode: ApplicationMode;
    flowView: string;
    nodeState: any;
    forcePushToFlowRunner: boolean;
    screenUICallback: (action: any) => void;
    getNodeExecutions(): any[];
    getNodeExecutionsByNodeName(nodeName: any): any;
    registerWorker(worker: IFlowAgent): void;
    onReceiveFlowNodeExecuteResult: any;
    registerOnReceiveFlowNodeExecuteResult: (onReceiveFlowNodeExecuteResult: any) => void;
    onError: (error: any) => void;
    onMessage: (event: any, flowAgent: IFlowAgent) => void;
    registerFlowNodeObserver: (nodeName: string, observableId: string, callback: (payload: any) => void) => void;
    unregisterFlowNodeObserver: (nodeName: any, observableId: any) => void;
    executionObservables: any[];
    registerFlowExecutionObserver: (observableId: string, callback: (executionEvent: IExecutionEvent) => void) => void;
    unregisterFlowExecuteObserver: (observableId: any) => void;
    currentFlowId: string;
    resetCurrentFlow: () => void;
    updateFlowNode: () => void;
    pushFlowToFlowrunner: (flow: any, autoStartNodes: boolean | undefined, flowId: string) => void;
    executeFlowNode: (nodeName: string, payload?: any) => void;
    modifyFlowNode: (nodeName: string, propertyName: string, value: any, executeNode?: string | undefined, eventName?: string | undefined, additionalValues?: any, isBundledNode?: boolean | undefined, bundleNodeId?: string | undefined) => void;
    isActiveFlowRunner: () => boolean;
    setPluginRegistry: (pluginRegistry: any) => void;
    getPluginRegistry: () => any;
    getTasksFromPluginRegistry: () => {
        className: any;
        fullName: any;
        flowType: any;
    }[];
    pauseFlowrunner: () => void;
    resumeFlowrunner: () => void;
    setFlowType: (flowType: string) => void;
    setAppMode: (mode: ApplicationMode) => void;
    getAppMode: () => ApplicationMode;
    registerScreenUICallback: (callback: (action: any) => void) => void;
    onDestroyAndRecreateWorker: any;
    registerDestroyAndRecreateWorker: (onDestroyAndRecreateWorker: any) => void;
    killAndRecreateWorker: () => void;
    nodeStateObservables: any[];
    registerNodeStateObserver: (observableId: string, callback: (nodeName: string, nodeState: string, touchedNodes: any) => void) => void;
    unregisterNodeStateObserver: (observableId: string) => void;
    runTests: (flowId: string) => void;
}
