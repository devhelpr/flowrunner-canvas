import { IFlowState } from '../../../state/flow-state';
export interface ILineHelperProps {
    endshapeid: string;
    startshapeid: string;
    node: any;
    lineNode: any;
    getNodeInstance: any;
    canvasHasSelectedNode: boolean;
    isSelected: boolean;
    selectedNode: any;
    shapeRefs: any;
    onLineMouseOver: any;
    onLineMouseOut: any;
    onClickLine: any;
    touchedNodes: any;
    newStartPosition: any;
    onMouseStart: any;
    onMouseMove: any;
    onMouseEnd: any;
    useFlowStore: () => IFlowState;
    onMouseConnectionStartOver?: any;
    onMouseConnectionStartOut?: any;
    onMouseConnectionStartStart?: any;
    onMouseConnectionStartMove?: any;
    onMouseConnectionStartEnd?: any;
    onMouseConnectionEndOver?: any;
    onMouseConnectionEndOut?: any;
    onMouseConnectionEndStart?: any;
    onMouseConnectionEndMove?: any;
    onMouseConnectionEndEnd?: any;
    onMouseConnectionEndLeave?: any;
}
export declare const LineHelper: (props: ILineHelperProps) => JSX.Element;
export interface ILinesProp {
    node: any;
    getNodeInstance: any;
    canvasHasSelectedNode: boolean;
    isSelected: boolean;
    selectedNode: any;
    shapeRefs: any;
    onLineMouseOver: any;
    onLineMouseOut: any;
    onClickLine: any;
    touchedNodes: any;
    onMouseStart: any;
    onMouseMove: any;
    onMouseEnd: any;
    useFlowStore: () => IFlowState;
    onMouseConnectionStartOver?: any;
    onMouseConnectionStartOut?: any;
    onMouseConnectionStartStart?: any;
    onMouseConnectionStartMove?: any;
    onMouseConnectionStartEnd?: any;
    onMouseConnectionEndOver?: any;
    onMouseConnectionEndOut?: any;
    onMouseConnectionEndStart?: any;
    onMouseConnectionEndMove?: any;
    onMouseConnectionEndEnd?: any;
    onMouseConnectionEndLeave?: any;
}
export declare const Lines: (props: ILinesProp) => JSX.Element;
